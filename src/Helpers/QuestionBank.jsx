export const Question = [
    {
        prompt: "What is the purpose of React?",
        optionA: "To manage the database",
        optionB: "To create server-side logic",
        optionC: "To build user interfaces",
        optionD: "To handle network requests",
        answer: "C",
    },
    {
        prompt: "What is a component in React?",
        optionA: "A function that returns HTML",
        optionB: "A database schema",
        optionC: "A server endpoint",
        optionD: "A CSS style",
        answer: "A",
    },
    {
        prompt: "What is JSX?",
        optionA: "A JavaScript framework",
        optionB: "A CSS preprocessor",
        optionC: "A syntax extension for JavaScript",
        optionD: "A type of database query",
        answer: "C",
    },
    {
        prompt: "How do you create a React component?",
        optionA: "Using the createComponent function",
        optionB: "By defining a function or class that returns JSX",
        optionC: "By writing HTML in a .jsx file",
        optionD: "Using the createElement API",
        answer: "B",
    },
    {
        prompt: "What is the useState hook used for?",
        optionA: "To fetch data from an API",
        optionB: "To manage state in a functional component",
        optionC: "To handle user input events",
        optionD: "To apply styles to components",
        answer: "B",
    },
    {
        prompt: "What is the virtual DOM?",
        optionA: "A copy of the real DOM kept in memory",
        optionB: "A way to directly manipulate the real DOM",
        optionC: "A server-side rendering technique",
        optionD: "A new JavaScript syntax",
        answer: "A",
    },
    {
        prompt: "How do you pass data to a child component?",
        optionA: "Using state",
        optionB: "Using props",
        optionC: "Using context",
        optionD: "Using refs",
        answer: "B",
    },
    {
        prompt: "What does the useEffect hook do?",
        optionA: "It allows you to perform side effects in a functional component",
        optionB: "It fetches data from an API",
        optionC: "It manages component state",
        optionD: "It applies styles to components",
        answer: "A",
    },
    {
        prompt: "What is prop drilling?",
        optionA: "A technique to optimize rendering",
        optionB: "The process of passing data through multiple layers of components",
        optionC: "A way to handle state globally",
        optionD: "A method for styling components",
        answer: "B",
    },
    {
        prompt: "What is the purpose of React Router?",
        optionA: "To manage state",
        optionB: "To handle API requests",
        optionC: "To handle navigation between different views in a React application",
        optionD: "To manage component lifecycle",
        answer: "C",
    },
    {
        prompt: "What does the setState function do in a class component?",
        optionA: "Sets the initial state",
        optionB: "Updates the state and re-renders the component",
        optionC: "Fetches data from an API",
        optionD: "Handles component lifecycle events",
        answer: "B",
    },
    {
        prompt: "What is a pure component in React?",
        optionA: "A component that never re-renders",
        optionB: "A component that only renders HTML",
        optionC: "A component that avoids re-rendering if props and state are the same",
        optionD: "A component that handles side effects",
        answer: "C",
    },
    {
        prompt: "What is the difference between a class component and a functional component?",
        optionA: "Class components can use hooks",
        optionB: "Functional components can manage state with setState",
        optionC: "Class components use render method to return JSX",
        optionD: "Functional components are more performant",
        answer: "C",
    },
    {
        prompt: "What is the context API in React used for?",
        optionA: "To manage local state",
        optionB: "To manage global state",
        optionC: "To perform side effects",
        optionD: "To apply styles to components",
        answer: "B",
    },
    {
        prompt: "How do you handle forms in React?",
        optionA: "Using the formData API",
        optionB: "Using controlled components",
        optionC: "Using uncontrolled components",
        optionD: "Using Redux",
        answer: "B",
    },
    {
        prompt: "What is the useContext hook used for?",
        optionA: "To create context",
        optionB: "To manage state in a functional component",
        optionC: "To consume context values",
        optionD: "To handle side effects",
        answer: "C",
    },
    {
        prompt: "What is the purpose of keys in React?",
        optionA: "To manage component state",
        optionB: "To apply styles to components",
        optionC: "To uniquely identify elements in a list",
        optionD: "To handle events",
        answer: "C",
    },
    {
        prompt: "How do you optimize performance in a React application?",
        optionA: "By using only functional components",
        optionB: "By avoiding the use of state",
        optionC: "By using React.memo and useCallback",
        optionD: "By not using JSX",
        answer: "C",
    },
    {
        prompt: "What is a higher-order component (HOC) in React?",
        optionA: "A component that manages global state",
        optionB: "A component that renders other components",
        optionC: "A function that takes a component and returns a new component",
        optionD: "A component that handles side effects",
        answer: "C",
    },
    {
        prompt: "What does the useReducer hook do?",
        optionA: "Manages side effects",
        optionB: "Manages complex state logic",
        optionC: "Handles context values",
        optionD: "Handles form submissions",
        answer: "B",
    },
    {
        prompt: "What is React.Fragment used for?",
        optionA: "To manage state in a component",
        optionB: "To group a list of children without adding extra nodes to the DOM",
        optionC: "To handle side effects",
        optionD: "To fetch data from an API",
        answer: "B",
    },
    {
        prompt: "How do you conditionally render a component in React?",
        optionA: "Using if-else statements in the return",
        optionB: "Using ternary operators or &&",
        optionC: "Using switch-case",
        optionD: "Using for loops",
        answer: "B",
    },
    {
        prompt: "What is the useRef hook used for?",
        optionA: "To create a reference to a DOM element",
        optionB: "To manage state in a functional component",
        optionC: "To perform side effects",
        optionD: "To handle API requests",
        answer: "A",
    },
    {
        prompt: "What is the difference between props and state?",
        optionA: "Props are mutable, state is immutable",
        optionB: "State is passed from parent to child, props are local to the component",
        optionC: "Props are used to pass data, state is used to manage data within the component",
        optionD: "There is no difference",
        answer: "C",
    },
    {
        prompt: "What does lifting state up mean in React?",
        optionA: "Moving state to a higher level in the component hierarchy",
        optionB: "Moving state to a lower level in the component hierarchy",
        optionC: "Using hooks to manage state",
        optionD: "Using context to manage state",
        answer: "A",
    },
    {
        prompt: "What is the default value of useState?",
        optionA: "Undefined",
        optionB: "Null",
        optionC: "An empty array",
        optionD: "The value passed as an argument to useState",
        answer: "D",
    },
    {
        prompt: "What does the useMemo hook do?",
        optionA: "Optimizes performance by memoizing expensive calculations",
        optionB: "Handles side effects",
        optionC: "Manages component state",
        optionD: "Applies styles to components",
        answer: "A",
    },
    {
        prompt: "What is reconciliation in React?",
        optionA: "The process of updating the real DOM",
        optionB: "The process of updating the virtual DOM",
        optionC: "The process of matching the virtual DOM with the real DOM",
        optionD: "The process of fetching data from an API",
        answer: "C",
    },
    {
        prompt: "What does the shouldComponentUpdate lifecycle method do?",
        optionA: "Determines if a component should re-render",
        optionB: "Updates the component state",
        optionC: "Handles side effects",
        optionD: "Applies styles to the component",
        answer: "A",
    },
    {
        prompt: "What is the purpose of the componentDidMount lifecycle method?",
        optionA: "To handle state updates",
        optionB: "To fetch data from an API after the component has mounted",
        optionC: "To apply styles to the component",
        optionD: "To manage context",
        answer: "B",
    },
    {
        prompt: "What is the difference between componentWillMount and componentDidMount?",
        optionA: "componentWillMount is called before render, componentDidMount is called after render",
        optionB: "componentWillMount is called after render, componentDidMount is called before render",
        optionC: "There is no difference",
        optionD: "Both are deprecated in React",
        answer: "A",
    },
    {
        prompt: "What does the componentWillUnmount lifecycle method do?",
        optionA: "Handles state updates",
        optionB: "Cleans up before the component is removed from the DOM",
        optionC: "Fetches data from an API",
        optionD: "Applies styles to the component",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the constructor method in a React class component?",
        optionA: "To handle side effects",
        optionB: "To initialize state and bind event handlers",
        optionC: "To fetch data from an API",
        optionD: "To apply styles to the component",
        answer: "B",
    },
    {
        prompt: "What is the difference between controlled and uncontrolled components?",
        optionA: "Controlled components manage their own state, uncontrolled components do not",
        optionB: "Uncontrolled components manage their own state, controlled components do not",
        optionC: "Controlled components use refs, uncontrolled components use state",
        optionD: "There is no difference",
        answer: "B",
    },
    {
        prompt: "How do you handle events in React?",
        optionA: "Using addEventListener",
        optionB: "Using inline event handlers",
        optionC: "Using the onEventName attribute",
        optionD: "Using refs",
        answer: "C",
    },
    {
        prompt: "What is the purpose of the key attribute in React?",
        optionA: "To identify elements in a list and help React optimize rendering",
        optionB: "To apply styles to elements",
        optionC: "To handle events",
        optionD: "To manage state",
        answer: "A",
    },
    {
        prompt: "What is the use of React.PureComponent?",
        optionA: "To handle side effects",
        optionB: "To optimize performance by shallowly comparing props and state",
        optionC: "To manage state",
        optionD: "To handle context",
        answer: "B",
    },
    {
        prompt: "How do you pass methods to a child component?",
        optionA: "Using props",
        optionB: "Using state",
        optionC: "Using context",
        optionD: "Using refs",
        answer: "A",
    },
    {
        prompt: "What is the purpose of the defaultProps attribute in React?",
        optionA: "To define default prop values for a component",
        optionB: "To manage component state",
        optionC: "To handle side effects",
        optionD: "To apply styles to the component",
        answer: "A",
    },
    {
        prompt: "What does the useLayoutEffect hook do?",
        optionA: "Runs a side effect after all DOM mutations",
        optionB: "Runs a side effect before all DOM mutations",
        optionC: "Manages state in a functional component",
        optionD: "Handles context values",
        answer: "B",
    },
    {
        prompt: "What is a React portal?",
        optionA: "A way to create a new React application",
        optionB: "A method for managing state",
        optionC: "A way to render children into a DOM node outside of the parent component",
        optionD: "A method for handling side effects",
        answer: "C",
    },
    {
        prompt: "How do you handle errors in a React component?",
        optionA: "Using try-catch blocks",
        optionB: "Using error boundaries",
        optionC: "Using useEffect hook",
        optionD: "Using context",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the useDebugValue hook?",
        optionA: "To manage state in a functional component",
        optionB: "To handle side effects",
        optionC: "To display a label for custom hooks in React DevTools",
        optionD: "To apply styles to the component",
        answer: "C",
    },
    {
        prompt: "What is the difference between a functional component and a React hook?",
        optionA: "Functional components manage state, hooks do not",
        optionB: "Hooks manage state and side effects in functional components",
        optionC: "Hooks can be used in class components, functional components cannot",
        optionD: "There is no difference",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the useCallback hook?",
        optionA: "To memoize functions and avoid unnecessary re-renders",
        optionB: "To handle side effects",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "A",
    },
    {
        prompt: "What is the purpose of the React.StrictMode component?",
        optionA: "To handle side effects",
        optionB: "To check for potential problems in the application",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "B",
    },
    {
        prompt: "What is the difference between useEffect and useLayoutEffect?",
        optionA: "useEffect runs after render, useLayoutEffect runs before render",
        optionB: "useEffect runs after paint, useLayoutEffect runs before paint",
        optionC: "useEffect handles side effects, useLayoutEffect manages state",
        optionD: "There is no difference",
        answer: "B",
    },
    {
        prompt: "How do you lazy load a component in React?",
        optionA: "Using the React.lazy function",
        optionB: "Using the useEffect hook",
        optionC: "Using the useState hook",
        optionD: "Using the useReducer hook",
        answer: "A",
    },
    {
        prompt: "What is the Suspense component used for?",
        optionA: "To manage state in a functional component",
        optionB: "To handle side effects",
        optionC: "To display a fallback UI while a component is loading",
        optionD: "To apply styles to the component",
        answer: "C",
    },
    {
        prompt: "What is the purpose of the memo function in React?",
        optionA: "To handle side effects",
        optionB: "To optimize performance by memoizing functional components",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the createContext function in React?",
        optionA: "To create a new React application",
        optionB: "To create a context for managing global state",
        optionC: "To handle side effects",
        optionD: "To apply styles to the component",
        answer: "B",
    },
    {
        prompt: "What does the ReactDOM.render method do?",
        optionA: "Creates a new React component",
        optionB: "Updates the state of a component",
        optionC: "Renders a React component into the DOM",
        optionD: "Handles side effects",
        answer: "C",
    },
    {
        prompt: "What is the purpose of the findDOMNode method in React?",
        optionA: "To find a specific component in the virtual DOM",
        optionB: "To find a specific component in the real DOM",
        optionC: "To apply styles to a component",
        optionD: "To manage state in a functional component",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the hydrate method in React?",
        optionA: "To create a new React application",
        optionB: "To attach event listeners to server-rendered HTML",
        optionC: "To manage state in a functional component",
        optionD: "To handle side effects",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the cloneElement method in React?",
        optionA: "To create a new React component",
        optionB: "To clone an element and pass it new props",
        optionC: "To manage state in a functional component",
        optionD: "To handle side effects",
        answer: "B",
    },
    {
        prompt: "What is the difference between componentDidUpdate and componentWillUpdate?",
        optionA: "componentDidUpdate is called before render, componentWillUpdate is called after render",
        optionB: "componentDidUpdate is called after render, componentWillUpdate is called before render",
        optionC: "There is no difference",
        optionD: "Both are deprecated in React",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the forceUpdate method in React?",
        optionA: "To force a component to re-render",
        optionB: "To manage state in a functional component",
        optionC: "To handle side effects",
        optionD: "To apply styles to the component",
        answer: "A",
    },
    {
        prompt: "How do you create a ref in a class component?",
        optionA: "Using the createRef function",
        optionB: "Using the useRef hook",
        optionC: "Using the setState function",
        optionD: "Using the createContext function",
        answer: "A",
    },
    {
        prompt: "What is the purpose of the forwardRef function in React?",
        optionA: "To handle side effects",
        optionB: "To pass a ref through a component to one of its children",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "B",
    },
    {
        prompt: "What does the React.Children.map function do?",
        optionA: "Maps over the children of a component",
        optionB: "Maps over the props of a component",
        optionC: "Maps over the state of a component",
        optionD: "Maps over the context values",
        answer: "A",
    },
    {
        prompt: "What is the difference between React.Children.map and Array.prototype.map?",
        optionA: "React.Children.map can only be used with arrays",
        optionB: "React.Children.map works with any iterable",
        optionC: "React.Children.map handles null and undefined children gracefully",
        optionD: "There is no difference",
        answer: "C",
    },
    {
        prompt: "What does the React.Children.toArray function do?",
        optionA: "Converts children to an array",
        optionB: "Converts props to an array",
        optionC: "Converts state to an array",
        optionD: "Converts context values to an array",
        answer: "A",
    },
    {
        prompt: "What is the purpose of the React.forwardRef function?",
        optionA: "To handle side effects",
        optionB: "To forward refs to child components",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "B",
    },
    {
        prompt: "How do you create a ref in a functional component?",
        optionA: "Using the createRef function",
        optionB: "Using the useRef hook",
        optionC: "Using the setState function",
        optionD: "Using the createContext function",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the React.StrictMode component?",
        optionA: "To identify potential problems in the application",
        optionB: "To apply styles to components",
        optionC: "To manage state in a functional component",
        optionD: "To handle side effects",
        answer: "A",
    },
    {
        prompt: "What is the purpose of the React.Fragment component?",
        optionA: "To handle side effects",
        optionB: "To group a list of children without adding extra nodes to the DOM",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the React.PureComponent component?",
        optionA: "To optimize performance by shallowly comparing props and state",
        optionB: "To handle side effects",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "A",
    },
    {
        prompt: "What is the purpose of the React.createElement function?",
        optionA: "To create a new React component",
        optionB: "To create a React element",
        optionC: "To manage state in a functional component",
        optionD: "To handle side effects",
        answer: "B",
    },
    {
        prompt: "What is the difference between React.createElement and JSX?",
        optionA: "React.createElement is used to create elements, JSX is syntactic sugar for React.createElement",
        optionB: "JSX is used to create elements, React.createElement is syntactic sugar for JSX",
        optionC: "There is no difference",
        optionD: "React.createElement is used for functional components, JSX is used for class components",
        answer: "A",
    },
    {
        prompt: "What is the purpose of the React.cloneElement function?",
        optionA: "To create a new React component",
        optionB: "To clone an element and pass it new props",
        optionC: "To manage state in a functional component",
        optionD: "To handle side effects",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the React.memo function?",
        optionA: "To optimize performance by memoizing functional components",
        optionB: "To handle side effects",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "A",
    },
    {
        prompt: "What is the purpose of the React.lazy function?",
        optionA: "To handle side effects",
        optionB: "To lazy load a component",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the React.Suspense component?",
        optionA: "To handle side effects",
        optionB: "To display a fallback UI while a component is loading",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the React.forwardRef function?",
        optionA: "To handle side effects",
        optionB: "To forward refs to child components",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the React.createContext function?",
        optionA: "To handle side effects",
        optionB: "To create a context for managing global state",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the React.StrictMode component?",
        optionA: "To identify potential problems in the application",
        optionB: "To apply styles to components",
        optionC: "To manage state in a functional component",
        optionD: "To handle side effects",
        answer: "A",
    },
    {
        prompt: "What is the purpose of the React.Fragment component?",
        optionA: "To handle side effects",
        optionB: "To group a list of children without adding extra nodes to the DOM",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "B",
    },
    {
        prompt: "What is the purpose of the React.PureComponent component?",
        optionA: "To optimize performance by shallowly comparing props and state",
        optionB: "To handle side effects",
        optionC: "To manage state in a functional component",
        optionD: "To apply styles to the component",
        answer: "A",
    },
    {
        prompt: "What is the purpose of the React.createElement function?",
        optionA: "To create a new React component",
        optionB: "To create a React element",
        optionC: "To manage state in a functional component",
        optionD: "To handle side effects",
        answer: "B",
    },
    {
        prompt: "What is the difference between React.createElement and JSX?",
        optionA: "React.createElement is used to create elements, JSX is syntactic sugar for React.createElement",
        optionB: "JSX is used to create elements, React.createElement is syntactic sugar for JSX",
        optionC: "There is no difference",
        optionD: "React.createElement is used for functional components, JSX is used for class components",
        answer: "A",
    },
   ];